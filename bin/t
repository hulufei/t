#!/usr/bin/env node
// vim: set filetype=javascript:

var path = require('path');
var os = require('os');
var fs = require('fs');

var program = require('commander');
var moment = require('moment');
var colors = require('colors');
var mkdirp = require('mkdirp');

var T = require('../t');

// Track tasks daily, saved as a plain text file named by today's date
// eg. 2013-10-10.t
var today = moment().format('YYYY-MM-DD');
var HOME = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
var configFile = path.join(HOME, '.t/config.json');
var config;

// A config.json set/get task saved directory
// `{ dir: 'path' }`
function requireConfig() {
  try {
    return require(configFile);
  }
  catch(e) {
    console.log('\nPlease set task saved directory first.');
    program.outputHelp();
    process.exit(1);
  }
}

function prompt(t) {
  console.log('You are working on ' + t.task.text.bold.cyan + ' started at ' + t.task.start.green);
  console.log('Press s+Enter to stop working on this task');

  process.stdin.resume();
  process.stdin.on('data', function(action) {
    if (action == 's' + os.EOL) {
      // Save time and exit
      // TODO: save end time every 3 minutes to prevent like Ctrl+C exit
      t.stop();
      process.exit(1);
    }
  });
}

// date format: YYYY-MM-DD
function iniT(date, cb) {
  config = config || requireConfig();
  var t = new T(path.join(config.dir, (date || today) + '.t'));
  if (cb) {
    t.stream.on('error', function(e) { cb(e, t); });
    t.parser.on('end', function(e) { cb(e, t); });
  }
  return t;
}

program
  .command('set [dir]')
  .description('get/set the task saved directory')
  .action(function(d) {
    var config = {};
    try { config = require(configFile); } catch(e) {}
    if (d) {
      config.dir = path.resolve(d);
      try { mkdirp.sync(path.dirname(configFile)); } catch(e) {}
      fs.writeFileSync(configFile, JSON.stringify(config, null, 4));
      console.log('Set the saved directory to ' + config.dir + ' success!');
    }
    else {
      // Show the saved directory without specified
      console.log(config.dir || 'You have not set task saved directory yet!');
    }
  });

program
  .command('add <task>')
  .description('add a new task(todo)')
  .action(function(text) {
    iniT(today, function(e, t) {
      t.todo(text);
    });
  });

program
  .command('start <id|task>')
  .description('start a task by id, or add and start a new task')
  .action(function(arg) {
    iniT(today, function(e, t) {
      if (/^\d+$/.test(arg)) {
        // Start task by id
        var id = parseInt(arg, 10);
          try {
            t.start(id);
            prompt(t);
          }
          catch(e) {
            console.log('Task id ' + arg.red + ' does not exist!');
            process.exit(1);
          }
      }
      else {
        // Add new task then start
        t.start(arg);
        prompt(t);
      }
    });
  });

program
  .command('list [period]')
  .description('list tasks, optional specified by days or week.\n' +
      '\teg.\n' +
      '\tlist\tlist today\'s tasks\n' +
      '\tlist 3\tlist last 3 day\'s tasks'
    )
  .action(function(period) {
    if (period) {
      var days = parseInt(period, 10);
      var date;

      var _next = function(e, t) {
        console.log('\n' + date.bold.magenta + '\n');
        var list = t.getSortedList();
        if (list.length === 0) {
          console.log('You have no task today!'.cyan);
        }
        list.forEach(function(item, i) {
          // Exclude todo items
          if (item.start && item.end) {
            var duration = item.start + ' - ' + item.end;
            console.log(duration.green + '\t' + item.text.cyan);
          }
        });
        if (--days >= 0) {
          summary(days);
        }
      };

      var summary = function(days) {
        date = moment().subtract('d', days).format('YYYY-MM-DD');
        iniT(date, _next);
      };

      if (days > 0 && days < 30) {
        summary(--days);
      }
    }
    else {
      var t = iniT();
      t.parser.on('end', function() {
        var list = t.getUniqList();
        if (list.length === 0) {
          console.log('You have no task tracked today!');
          process.exit(1);
        }
        // List with ids
        list.forEach(function(item, i) {
          console.log(i.toString().green+ '\t' + item.text.cyan);
        });
      });
    }
  });

program.parse(process.argv);

if (process.argv.length == 2) {
  program.outputHelp();
}
